$Id$

scanbd - KMUX scanner button daemon

Copyright (C) 2008  Wilhelm Meier (wilhelm.meier@fh-kl.de)

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

0.0) the problem

The majority of the desktop scanners are more or less "passive" devices, say they can be 
queried from a suitable application but they don't do anything themselves. The more expensive
departmental scanners typically include a network interface and the capability to send the scanned 
images via email or place them on a fileserver.

scanbd tries to solve the problem with managing the inexpensive, desktop scanners to make use of the
scanner-buttons they have (in the case, they are supported by sane).
Because the scanners are passive, the scan-software has to poll the buttons on a regularly basis (e.g. all
100 - 500ms). For this purpose the software has to open the device and look for value changes of the buttons.
But if you do so, the device is locked and no other scan-application (e.g. xsane) can open the device for 
scanning. This is also true for saned, the network scanning daemon. Periodically querying the buttons
and scanning on the same host is mutual exclusive.

0.1) the solution

scanbd (the scanner button daemon) opens and polls the scanner and therefore locks the device. So no other 
application can access the device directly (open the /dev/..., usb). To solve this, we use a so called
"manager-mode" of scanbd: scanbd is configured as a "proxy" to access the scanner and, if another application
tries to use the scanner, the polling is disabled for the time the other scan-application wants to
use the scanner. To make this happen, scanbd is configured instead of saned as the network scanning daemon. If
a scan request arrives to scanbd (in manager-mode) on the sane-port, scanbd stops the polling by sending
a dbus-signal (default) or a posix-signal (SIGUSR1) (signal-mode) to the polling scanbd-daemon. Then it 
starts the real saned which scans and sends the data back to the requesting application. Afterwords the scanbd-manager
restarts the polling by sending another dbus-signal (or the posix-signal SIGUSR2). 

So all applications must be enabled to use network-scanning (even if the scanner is local).

1) build

If you don't want scanbd to use HAL, comment the line in the Makefile (USE_HAL=yes)

make 

copy the executable scanbd and config-files scanbd.conf, etc. to useful places
(or use "make install" to copy to /usr/local/etc/scanbd)

2) scanbd_dbus.conf

copy this file into the dbus system-bus configuration directory,
then restart dbus and hald

3) inetd.conf

edit the saned-line to use scanbd as a wrapper, e.g.:

sane-port stream tcp4 nowait saned /usr/local/bin/scanbd scanbd -m -c /usr/local/etc/scanbd/scanbd.conf

or 

(if the saned user can't open the devices, e.g. ubuntu)

sane-port stream tcp4 nowait root /usr/local/bin/scanbd scanbd -m -c /usr/local/etc/scanbd/scanbd.conf

(if you are worried about running scanbd with root privileges, see below on 7))

be sure to give the -m (and perhaps -s) flag to scanbd to enable the "manager-mode" (if you
add also the -s flag the "signal-mode" is used, e.g. if dbus isn't available).

4) scanbd.conf

edit the config file (in /usr/local/etc/scanbd)

5) scripts

make some useful scripts (see the examples test.script, example.script or scanadf.script)

6) sane config

all desktop applications should only get access to the scanners via the net-backend, so edit /etc/sane.d/dll.conf
to only contain the net-backend. Give the net-backend a suitable configuration and add the machines, where the 
scanners (and scanbd) are (this could be also localhost).

If scanbd is running on a desktop machine, saned needs another config which only includes local scanners. Therefore
the env-var SANE_CONFIG_DIR is used in the debian-script and the upstart job. Put the directory of this dll.conf
into this env-var (e.g. /usr/local/etc/scanbd) and remove the net-backend from this config-file.

6) start the scanbd 

e.g.:

export SANE_CONFIG_DIR=/usr/local/etc/scanbd
/usr/local/scanbd -c /usr/local/etc/scanbd/scanbd.conf

or use the debian script (scanbd.script) or the upstart service (scanbdservice.conf)

7) some words on access rights

if the saned-user can't access the scanners, e.g. if 

SANE_CONFIG_DIR=/usr/local/etc/scanbd scanimage -L

doesn't get any results, but if you run the same command as root with success, you have wrong access rights to the 
scanner devices. If you have have a scan-only device (not an all-in-one type), use the file 99-saned.rules file
an copy this file to /lib/udev/rules.d and then issue a rescan:

udevadm trigger

If you have an all-in-one scanner the device is matched via a printer rule and the access is granted to the
lp group. In this case you should simply add the saned user to the lp group:

usermod -a -G lp saned

8) Additional hints:

- if there are problems recognizing new / removed devices, it is possible to send scanbd a SIGHUP to reconfigure
  and look for new devices. This can be done via udev-rules.

- be sure to include only the necessary drivers in /etc/saned.d/dll.conf, since scanadf will hang (timeout)

- to test an action for a specific device, use

  scanbd -m -t <device_number> -a <name_of_action>

  e.g. for the first scanner found trigger the action "scan"
  scanbd -m -t 0 -a scan

- problematic desktop scan applications

  most desktop-scan-applications open the scanner but never closes them, therefore the saned is started but 
  never (as long as the scan-application runs) exits. This blocks the scanbd from gaining again the control 
  over the scanner and go on polling.

  The better way to do scanning would be to first get a list of available scanners (scanimage -L or scanadf -L),
  store the list but then close the connection to the found scanners. If a scan is requested, a device from
  the list is choosen, the scan happens and thereafter the connection to the scanner is closed!

  One can achieve this with simple shell scripting:
  a) to get a list of all scanners available: scanimage -L
  b) select a scanner from the list
  c) do the scan: scanadf -d <device>
  
  Or use a web based application for scanning (see the frontends documentation on the sane-project page)

